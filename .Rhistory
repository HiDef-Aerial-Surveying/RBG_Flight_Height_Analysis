SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
monthdat <- months(SppDat$Date)
all.frame <- SppDat %>% dplyr::select(Species,low.height,mid.height,high.height)
all.frame$month <- monthdat
## Gathers the frame into LONG format for plotting
all.frame <- gather(all.frame,category,out,low.height:high.height)
all.fra,e
all.frame
all.frame$category <- plyr::revalue(all.frame$category,c("low.height"="Low",
"high.height"="High",
'mid.height'="Mean"))
all.frame$category <- factor(all.frame$category, levels=c("Low","Mean","High"))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch),medPCH = median(PCH))
all.frame %>% nest(data=c(out,month)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
)
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch),medPCH = median(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch))
Bplot <- ggplot(all.frame) +
geom_boxplot(aes(x=category,y=out,fill=Species),width=0.5,position= position_dodge(width=1))+
stat_summary(aes(x=category,y=out,group=Species),
fun=mean, geom="point", shape=18, size=3.5, color="black",position= position_dodge(width=1))+
scale_fill_manual(name="Species",values=c("grey30","grey60"))+
ggthemes::theme_gdocs()+
ylab("Height (m)")+xlab("")+
theme(
panel.border = element_blank()
)
Bplot
shapearea <- raster::shapefile(boundary.shapefile)
shapearea <- spTransform(shapearea,WGS84)
e <- extent(shapearea)
# coerce to a SpatialPolygons object
p <- as(e, 'SpatialPolygons')
proj4string(p) <- sf::st_crs(4326)$proj4string
data_mod <- SppDat
names(data_mod)[which(names(data_mod)=="Latitude")] <- "Lat"
names(data_mod)[which(names(data_mod)=="Longitude")] <- "Lon"
rr <- produce.raster(data_mod,p,
month=NULL,grd.density=50000,
idp=3.0, crs=sf::st_crs(4326)$proj4string)
pointdat <- data.frame(rr$dmodt)
pointdatshp <- rr$dmodt
rr <- rr$rr
rR <- raster::mask(rr,shapearea)
outdf <- create.df.to.plot(rR,threshold = 0)
shapefileDF <- fortify(shapearea)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = shapefileDF,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
render_snapshot()
SppDat
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
View(refs)
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
View(Dat.reflect)
boxplot(Dat.reflect$fin.length)
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
return(tt)}),use.names=TRUE,fill=TRUE)
View(obsout)
View(datout)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
View(ObsDat)
View(SppDat)
### Until there's a better way to match, we just have to assume a 1:1 match
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs
## This is where you might want to check how many
#SppDat <- SppDat %>% dplyr::filter(Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
fhdata <- get.fhs(SppDat,Dat.reflect,bootsize = 1000)
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low,turbine.high)
SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
monthdat <- months(SppDat$Date)
all.frame <- SppDat %>% dplyr::select(Species,low.height,mid.height,high.height)
all.frame$month <- monthdat
## Gathers the frame into LONG format for plotting
all.frame <- gather(all.frame,category,out,low.height:high.height)
View(all.frame)
all.frame$category <- plyr::revalue(all.frame$category,c("low.height"="Low",
"high.height"="High",
'mid.height'="Mean"))
all.frame$category <- factor(all.frame$category, levels=c("Low","Mean","High"))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch))
all.frame %>% nest(data=c(out,month)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
)
all.frame %>% group_by(species,category) %>% summarise(mean(out))
Bplot <- ggplot(all.frame) +
geom_boxplot(aes(x=category,y=out,fill=Species),width=0.5,position= position_dodge(width=1))+
stat_summary(aes(x=category,y=out,group=Species),
fun=mean, geom="point", shape=18, size=3.5, color="black",position= position_dodge(width=1))+
scale_fill_manual(name="Species",values=c("grey30","grey60"))+
ggthemes::theme_gdocs()+
ylab("Height (m)")+xlab("")+
theme(
panel.border = element_blank()
)
Bplot
shapearea <- raster::shapefile(boundary.shapefile)
shapearea <- spTransform(shapearea,WGS84)
e <- extent(shapearea)
# coerce to a SpatialPolygons object
p <- as(e, 'SpatialPolygons')
proj4string(p) <- sf::st_crs(4326)$proj4string
data_mod <- SppDat
names(data_mod)[which(names(data_mod)=="Latitude")] <- "Lat"
names(data_mod)[which(names(data_mod)=="Longitude")] <- "Lon"
rr <- produce.raster(data_mod,p,
month=NULL,grd.density=50000,
idp=3.0, crs=sf::st_crs(4326)$proj4string)
pointdat <- data.frame(rr$dmodt)
pointdatshp <- rr$dmodt
rr <- rr$rr
rR <- raster::mask(rr,shapearea)
outdf <- create.df.to.plot(rR,threshold = 0)
shapefileDF <- fortify(shapearea)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = shapefileDF,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
render_snapshot()
plot.fhs <- function(titlename,fhdata,turbine.low,turbine.high){
fhdata <- fhdata[order(fhdata$mdheight,fhdata$hiheight),]
fhdata$birdid <- 1:nrow(fhdata)
G <- ggplot(fhdata)+
geom_errorbar(aes(ymin=lwheight,ymax=hiheight,x=birdid),width=0,size=2,colour='lightblue')+
geom_point(aes(x=birdid,y=mdheight),color="black")+
geom_hline(yintercept=turbine.low,linetype="dashed",size=1.25)+
geom_hline(yintercept=turbine.high,linetype="dashed",size=1.25)+
geom_hline(yintercept = 0)+
#scale_y_continuous(limits = c(0,180))+
theme_classic2()+
ylab("Height (m)")+
xlab("")+
ggtitle(titlename)+
theme(legend.position="bottom",
legend.direction = "horizontal",
legend.box.spacing = unit(1,"cm"),
panel.border = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_line(colour="grey80")
)
return(G)
}
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low,turbine.high)
Dat.plot
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Gannet"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
View(Dat.reflect)
boxplot(Dat.reflect$fin.length)
plot(Dat.reflect$fin.length)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
return(tt)}),use.names=TRUE,fill=TRUE)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
rlang::last_error()
View(datout)
class(datout$Species)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
return(tt)}),use.names=TRUE,fill=TRUE)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
asObsDat <- obsout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
datout$Species <- as.factor(datout$Species)
class(datour$Species)
class(datout$Species)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
View(datout)
levels(datout$Species)
datout %>% dplyr::filter(Species == SPP,)
names(datout)
datout$Reflection <- as.factor(datout$Reflection)
levels(datour$Reflection)
levels(datout$Reflection)
levels(datour[,29])
levels(datout[,29])
datout[,29]
datout[,67]
datout[,29] <- as.factor(datout[,29])
datout[,67] <- as.factor(datout[,67])
summary(datout[,67])
summary(datout[,29])
datout <- datout[,-67]
#Problem filtering datout due to duplicate reflection columns. Worth knowing for future...
names(datout)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
### Until there's a better way to match, we just have to assume a 1:1 match
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs
## This is where you might want to check how many
#SppDat <- SppDat %>% dplyr::filter(Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
fhdata <- get.fhs(SppDat,Dat.reflect,bootsize = 1000)
View(asObsDat)
View(SppDat)
summary(SppDat$dir)
levels(SppDat$dir)
summary(SppDat$lengthvals.values)
is.na(Spp.Dat$lengthvals.values)
is.na(SppDat$lengthvals)
sumary(is.na(SppDat$lengthvals))
summary(is.na(SppDat$lengthvals))
get.lengths(SppDat)
a <- get.lengths(SppDat)
View(a)
View(Dat.reflect)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
return(tt)}),use.names=TRUE,fill=TRUE)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
View(datout)
#Problem filtering datout due to duplicate reflection columns. Worth knowing for future...
#names(datout)
#datout[,29] <- as.factor(datout[,29])
#datout[,67] <- as.factor(datout[,67])
#summary(datout[,29])
#summary(datout[,67])
datout <- datout[,-67]
SppDat <- datout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
### Until there's a better way to match, we just have to assume a 1:1 match
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs
## This is where you might want to check how many
SppDat <- SppDat %>% dplyr::filter(Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
fhdata <- get.fhs(SppDat,Dat.reflect,bootsize = 1000)
