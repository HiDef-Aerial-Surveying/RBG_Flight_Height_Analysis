mlist <- list.files(path=SSpath,full.names = T)
test1 <- readxl::read_xlsx(mlist[1],sheet="Data")
test2 <- readxl::read_xlsx(mlist[2],sheet="Data")
test3 <- readxl::read_xlsx(mlist[3],sheet="Data")
test4 <- readxl::read_xlsx(mlist[4],sheet="Data")
tout <- data.table::rbindlist(list(test1,test2,test3,test4),use.names=TRUE,fill=TRUE)
newout <- data.table::rbindlist(lapply(mlist,function(x) readxl::read_xlsx(x,sheet="Data")),
fill=TRUE)
tout <- data.table::rbindlist(list(test1,test4),use.names=TRUE,fill=TRUE)
tout <- data.table::rbindlist(list(test1,test2,test4),use.names=TRUE,fill=TRUE)
tout <- data.table::rbindlist(list(test1,test3,test4),use.names=TRUE,fill=TRUE)
View(test2)
names(test2)
names(test1)
tibble(test1)
tibble(test1)[39,]
tibble(test1)[,39]
tibble(test2)[,39]
newout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("foreach","gridExtra","ggpubr","rayshader","viridis",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs.
SppDat <- newout %>% dplyr::filter(Species == SPP,Reflection %in% c(NA, "No"))
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
# Get worksheets into data frame ------------------------------------------
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs.
SppDat <- newout %>% dplyr::filter(Species == SPP,Reflection %in% c(NA, "No"))
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs.
SppDat <- datout %>% dplyr::filter(Species == SPP,Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
# Calculate flight heights ------------------------------------------------
## Running this should calculate flight heights for the species of interest
fhdata <- get.fhs(SppDat,Dat.reflect)
# Calculate flight heights ------------------------------------------------
## Running this should calculate flight heights for the species of interest
fhdata <- get.fhs(SppDat,Dat.reflect,bootsize = 1000)
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata)
Dat.plot
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low = 25,turbine.high = 150)
Dat.plot
mean(fhdata$mdheight)
plot.fhs <- function(titlename,fhdata,turbine.low,turbine.high){
fhdata <- fhdata[order(fhdata$mdheight,fhdata$hiheight),]
fhdata$birdid <- 1:nrow(fhdata)
G <- ggplot(fhdata)+
geom_errorbar(aes(ymin=lwheight,ymax=hiheight,x=birdid),width=0,size=2,colour='lightblue')+
geom_point(aes(x=birdid,y=mdheight),color="black")+
geom_hline(yintercept=turbine.low,linetype="dashed",size=1.25)+
geom_hline(yintercept=turbine.high,linetype="dashed",size=1.25)+
geom_hline(yintercept = 0)+
#scale_y_continuous(limits = c(0,180))+
theme_classic2()+
ylab("Height (m)")+
xlab("")+
ggtitle(titlename)+
theme(legend.position="bottom",
legend.direction = "horizontal",
legend.box.spacing = unit(1,"cm"),
panel.border = element_blank(),
axis.text.x = element_blank(),
panel.grid.major = element_line(colour="grey80")
)
return(G)
}
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low = 25,turbine.high = 150)
Dat.plot
SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
monthdat <- months(SppDat$Date)
all.frame <- SppDat %>% dplyr:select(species,low.height,mid.height,high.height)
all.frame <- SppDat %>% dplyr::select(species,low.height,mid.height,high.height)
all.frame <- SppDat %>% dplyr::select(Species,low.height,mid.height,high.height)
all.frame$month <- monthdat
## Gathers the frame into LONG format for plotting
all.frame <- gather(all.frame,category,out,low.height:high.height)
all.frame$category <- plyr::revalue(all.frame$category,c("low.height"="Low",
"high.height"="High",
'mid.height'="Mean"))
all.frame$category <- factor(all.frame$category, levels=c("Low","Mean","High"))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low $ .x$out < turbine.high))/length(.x$out))
) %>% group_by(species,category) %>% summarise(mean(pch),sd(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low && .x$out < turbine.high))/length(.x$out))
) %>% group_by(species,category) %>% summarise(mean(pch),sd(pch))
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low && .x$out < turbine.high))/length(.x$out))
) %>% group_by(species,category) %>% summarise(mean(pch),sd(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low && .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(mean(pch),sd(pch))
all.frame
all.frame <- SppDat %>% dplyr::select(Species,low.height,mid.height,high.height)
all.frame$month <- monthdat
all.frame
which(all.frame$low.height > turbine.low && all.frame$low.height < turbine.high)
which(all.frame$low.height > turbine.low & all.frame$low.height < turbine.high)
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(mean(pch),sd(pch))
## Gathers the frame into LONG format for plotting
all.frame <- gather(all.frame,category,out,low.height:high.height)
all.frame$category <- plyr::revalue(all.frame$category,c("low.height"="Low",
"high.height"="High",
'mid.height'="Mean"))
all.frame$category <- factor(all.frame$category, levels=c("Low","Mean","High"))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(mean(pch),sd(pch))
all.frame %>% nest(data=c(out,month)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
)
Bplot <- ggplot(all.frame) +
geom_boxplot(aes(x=category,y=out,fill=Species),width=0.5,position= position_dodge(width=1))+
stat_summary(aes(x=category,y=out,group=Species),
fun=mean, geom="point", shape=18, size=3.5, color="black",position= position_dodge(width=1))+
scale_fill_manual(name="Species",values=c("grey30","grey60"))+
ggthemes::theme_gdocs()+
ylab("Height (m)")+xlab("")+
theme(
panel.border = element_blank()
)
Bplot
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
#tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
names(obsout)
names(datout)
View(datout)
View(obsout)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
### Until there's a better way to match, we just have to assume a 1:1 match
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs
## This is where you might want to check how many
SppDat <- SppDat %>% dplyr::filter(Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
monthdat <- months(SppDat$Date)
names(SppDat)
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
shapearea <- raster::shapefile(boundary.shapefile)
proj4string(shapearea)
projection(shapearea)
raster::projection(shapearea)
WGS84 <- sf::st_crs(4326)$proj4string
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
shapearea <- spTransform(shapearea,WGS84)
e <- extent(shapearea)
# coerce to a SpatialPolygons object
p <- as(e, 'SpatialPolygons')
proj4string(p) <- sf::st_crs(4326)$proj4string
data_mod <- SppDat
which(names(X)=="Latitude")
which(names(data_mod)=="Latitude")
which(names(data_mod)=="Longitude")
data_mod <- SppDat
names(data_mod)[which(names(data_mod)=="Latitude")] <- "Lat"
names(data_mod)[which(names(data_mod)=="Longitude")] <- "Lon"
rr <- produce.raster(data_mod,p,
month=NULL,grd.density=50000,
idp=3.0, crs=sf::st_crs(4326)$proj4string)
pointdat <- data.frame(rr$dmodt)
pointdatshp <- rr$dmodt
rr <- rr$rr
outdf <- create.df.to.plot(rr,threshold = 0)
create.df.to.plot <- function(rr,threshold){
test_spdf <- as(rr, "SpatialPixelsDataFrame")
test_df <- as.data.frame(test_spdf)
colnames(test_df) <- c("value", "x", "y")
test_df$value[test_df$value < 10] <- 0
return(test_df)
}
outdf <- create.df.to.plot(rr,threshold = 0)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=310)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
plot_gg(g,multicore=TRUE,width=6,height=4,scale=310)
rr
rR <- rmapshaper::ms_clip(rr,shapearea)
rR <- raster::crop(rr,shapearea)
plot(rR)
shapearea
plot(shapearea)
tt <- raster::shapefile("HD_RGB_Flight_Height_Code/boundary.shapefile/Middle.shp")
plot(tt)
shapefileDF <- fortify(shapearea)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = GWF4koutdf,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = shapefileDF,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=310)
render_snapshot()
??gClip
test <- raster::mask(rr,shapearea)
plot(test)
rR <- raster::mask(rr,shapearea)
outdf <- create.df.to.plot(rR,threshold = 0)
shapefileDF <- fortify(shapearea)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = shapefileDF,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=310)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
render_snapshot()
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
# Source script -----------------------------------------------------------
source("HD_RGB_Flight_Height_Code/helper.scripts/Bootstrap_method_helpers.R")
lib_list <- c("readxl","foreach","gridExtra","ggpubr","rayshader","viridis","raster",
"gstat","rgdal","sp","spatialEco","HTSSIP","hablar",
"data.table","tidyverse","boot","GPArotation","psych","cowplot")
Load_Libs(lib_list)
###################################
## TYPE IN SPECIES NAME HERE
SPP <- "Kittiwake"
###################################
## TYPE IN THE WORKSPACE WHERE YOUR BIRDS AT HEIGHT SPREADSHEETS ARE STORED
SSpath <- "HD_RGB_Flight_Height_Code/data.to.process/"
###################################
## TYPE IN THE WORKSPACE WHERE THE OBSERVATION SPREADSHEETS ARE STORED
OBpath <- "HD_RGB_Flight_Height_Code/observation.data/"
###################################
## TYPE IN THE FULL PATH TO THE BOUNDARY SHAPEFILE
boundary.shapefile <- "HD_RGB_Flight_Height_Code/boundary.shapefile/Seagreen_Phase_2_and_3_12km_buffer.shp"
###################################
## TYPE IN THE LOW AND HIGH POINT OF THE TURBINE BLADES
turbine.low <- 25
turbine.high <- 150
WGS84 <- sf::st_crs(4326)$proj4string
reflist <- list.files(path="Reflection_Database/Data_to_build_20perc_database/",full.names = T)
refout <- data.table::rbindlist(lapply(reflist,function(x) readxl::read_xlsx(x,sheet="Data")),
use.names=TRUE,fill=TRUE)
names(refout)[29] <- "Reflection"
unique(refout$Reflection)
### Get only the birds that have reflection...
refout <- refout[refout$Reflection=="Y",]
## Check sample size for each species
refout %>% count(Species)
## Check species names!! If
unique(refout$Species)
## Filter the reflection data by the species of interest
refs <- refout[refout$Species == SPP,]
### This builds the reflection data
Dat.reflect <- get.refl.lengths(refs)
Dat.reflect
mlist <- list.files(path=SSpath,full.names = T)
## Combines the data in the
datout <- data.table::rbindlist(lapply(mlist,function(x){
tt <- readxl::read_xlsx(x,sheet="Data")
tt <- tt %>% dplyr::select(-`Identification Date`)
return(tt)}),use.names=TRUE,fill=TRUE)
names(datout)[29] <- "Reflection"
unique(datout$Reflection)
olist <- list.files(path=OBpath,full.names = T)
## Combines the data in the
obsout <- data.table::rbindlist(lapply(olist,function(x){
tt <- readxl::read_xlsx(x)
return(tt)}),use.names=TRUE,fill=TRUE)
SppDat <- datout %>% dplyr::filter(Species == SPP,)
ObsDat <- obsout %>% dplyr::filter(Species == SPP,)
### Until there's a better way to match, we just have to assume a 1:1 match
SppDat$Latitude <- ObsDat$Latitude
SppDat$Longitude <- ObsDat$Longitude
## Gets the birds lengths and puts them into a dataframe for inputting into the flight height calcs
## This is where you might want to check how many
#SppDat <- SppDat %>% dplyr::filter(Reflection %in% c(NA, "No"))
SppDat <- get.lengths(SppDat)
fhdata <- get.fhs(SppDat,Dat.reflect,bootsize = 10)
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low,turbine.high)
Dat.plot
SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
fhdate
fhdata
### Generates the FH distribution plot
Dat.plot <- plot.fhs(SPP,fhdata,turbine.low,turbine.high)
SppDat$low.height <- fhdata$lwheight
SppDat$mid.height <- fhdata$mdheight
SppDat$high.height <- fhdata$hiheight
monthdat <- months(SppDat$Date)
all.frame <- SppDat %>% dplyr::select(Species,low.height,mid.height,high.height)
all.frame$month <- monthdat
## Gathers the frame into LONG format for plotting
all.frame <- gather(all.frame,category,out,low.height:high.height)
all.fra,e
all.frame
all.frame$category <- plyr::revalue(all.frame$category,c("low.height"="Low",
"high.height"="High",
'mid.height'="Mean"))
all.frame$category <- factor(all.frame$category, levels=c("Low","Mean","High"))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch),medPCH = median(PCH))
all.frame %>% nest(data=c(out,month)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
)
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch),medPCH = median(pch))
all.frame %>% nest(data=c(out)) %>%
mutate(
pch = map_dbl(data,~length(which(.x$out > turbine.low & .x$out < turbine.high))/length(.x$out))
) %>% group_by(Species,category) %>% summarise(PCH = mean(pch))
Bplot <- ggplot(all.frame) +
geom_boxplot(aes(x=category,y=out,fill=Species),width=0.5,position= position_dodge(width=1))+
stat_summary(aes(x=category,y=out,group=Species),
fun=mean, geom="point", shape=18, size=3.5, color="black",position= position_dodge(width=1))+
scale_fill_manual(name="Species",values=c("grey30","grey60"))+
ggthemes::theme_gdocs()+
ylab("Height (m)")+xlab("")+
theme(
panel.border = element_blank()
)
Bplot
shapearea <- raster::shapefile(boundary.shapefile)
shapearea <- spTransform(shapearea,WGS84)
e <- extent(shapearea)
# coerce to a SpatialPolygons object
p <- as(e, 'SpatialPolygons')
proj4string(p) <- sf::st_crs(4326)$proj4string
data_mod <- SppDat
names(data_mod)[which(names(data_mod)=="Latitude")] <- "Lat"
names(data_mod)[which(names(data_mod)=="Longitude")] <- "Lon"
rr <- produce.raster(data_mod,p,
month=NULL,grd.density=50000,
idp=3.0, crs=sf::st_crs(4326)$proj4string)
pointdat <- data.frame(rr$dmodt)
pointdatshp <- rr$dmodt
rr <- rr$rr
rR <- raster::mask(rr,shapearea)
outdf <- create.df.to.plot(rR,threshold = 0)
shapefileDF <- fortify(shapearea)
g <- ggplot() +
geom_tile(data=outdf, aes(x=x, y=y, fill=value), alpha=0.8) +
geom_polygon(aes(x = long, y = lat, group = group), data = shapefileDF,fill=NA,
col = "black") +
#geom_point(data=data_mod,aes(x=Lon,y=Lat),pch=19)+
scale_fill_viridis() +
labs(fill = "Height (m)",x="Longitude",y="Latitude")+
coord_equal() +
ggthemes::theme_map()+
theme(legend.position="right",
#legend.title = element_blank(),
axis.title = element_text(),
panel.background = element_blank(),
panel.border = element_rect(colour="black",fill="NA")
)
g
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
render_snapshot()
SppDat
plot_gg(g,multicore=TRUE,width=6,height=4,scale=280)
